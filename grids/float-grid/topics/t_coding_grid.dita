<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
  "../../dtd/technicalContent/dtd/task.dtd">

<task id="float-grid" xml:lang="en-us">
  <title>Coding a float-based grid</title>
  <shortdesc>
    Website grids can easily be coded with a simple structure of HTML containing blocks and CSS float and width values.
  </shortdesc>

  <prolog><metadata>
    <keywords>
      <indexterm>HTML</indexterm>
      <indexterm>CSS</indexterm>
      <indexterm>grids</indexterm>
      <indexterm>containing blocks</indexterm>
      <indexterm>float</indexterm>
    </keywords>
  </metadata></prolog>

  <taskbody>

    <context>
      <p>
        The key to writing a responsive, float-based grid is developing the 2 following structures of containing blocks: 1) initial grid context, and 2) CSS classes devoted to defining column widths within the former element.
      </p>
    </context>

    <section>
      <title>Grid context</title>
      <steps>
        <step>
          <cmd>
            Write a wrapper &lt;div&gt; element with a class named "grid"</cmd>
          <stepxmp>
            <pre>
<div class="grid">
  <!-- 100% wide -->
</div>
</pre>
          </stepxmp>
        </step>
      </steps>
    </section>

    <section>
      <title>Making column widths</title>

      <steps-unordered>
        <step>
          <cmd>
            In your HTML file, write a testable combination of columns within the containing block <code>.grid</code>.</cmd>
          <info>
            The example below presents a common use case, creating a main content bock with a sidebar to its right.</info>
          <stepxmp>
            <pre><!-- Example common use case -->
<div class="grid">
  <div class="col-2-3">
     Main Content
  </div>
  <div class="col-1-3">
     Sidebar
  </div>
</div>
</pre>
          </stepxmp>
        </step>

        <step>
          <cmd>
            In your CSS file, divide up your 100% grid context by writing classes to create your desired column widths.</cmd>
          <stepxmp>
            <pre>
.col-3-4 {
  width: 75%;
}
.col-2-3 {
  width: 66.66%;
}
.col-1-2 {
  width: 50%;
}
.col-1-3 {
  width: 33.33%;
}
.col-1-4 {
  width: 25%;
}
</pre>
          </stepxmp>
          <note>
            Note how the class names correspond to the desired output goal to divide the containing block context into columns.
        </step>

        <step>
          <info>
            Normal flow of elements stacks these div blocks on each other.</info>
          <cmd>
            In order for the columns to assemble in rows, write a regular expression selector to float all of the column classes.</cmd>
          <stepxmp>
            <pre>
[class*='col-'] {
  float: left;
}
</pre>
          </stepxmp>
        </step>
      </steps-unordered>

    </section>

    <section>
      <title>Clearing the parent containing block context</title>

      <steps>
        <step>
          <cmd>
            In your CSS file, use the <xref href="c_declr-clear"><code>clear</code></xref> declaration inside an <xref href="c_pseudo-elem-after"><code>:after</code></xref> pseudo-element on <code>.grid</code> to clear <xref href="c_pseudo-elem-after"><code>both</code></xref> right and left sides of the block.</cmd>
          <stepxmp>
            <pre>
.grid:after {
  content: "";
  display: table;
  clear: both;
}
</pre>
          </stepxmp>
        </step>
      </steps>
    </section>

    <example otherprops="web">
      <p data-height="312" data-theme-id="0" data-slug-hash="ojBpXW" data-default-tab="result" data-user="lndgrn" class='codepen'>See the Pen <a href='http://codepen.io/lndgrn/pen/ojBpXW/'>Basic CSS Float Grid</a> by Chris Lindgren (<a href='http://codepen.io/lndgrn'>@lndgrn</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
      <script async src="//assets.codepen.io/assets/embed/ei.js"></script>
    </example>

  </taskbody>
</task>